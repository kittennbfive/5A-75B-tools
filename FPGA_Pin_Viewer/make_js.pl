#! /usr/bin/perl

=pod
This script uses both .storable to write the JS-file.

(c) 2020-2022 by kittennbfive
AGPLv3+
THIS CODE IS PROVIDED WITHOUT ANY WARRANTY!
=cut

use strict;
use warnings FATAL=>'all';
use autodie;
use Storable;

my %connections_fpga; #{PIN}->()
%connections_fpga=%{retrieve('connections_fpga.storable')};

my %fpga_pins_cabga256; #{PIN}={pin_func, bank, dual_func}
%fpga_pins_cabga256=%{retrieve('fpga_cabga256_data.storable')};

open my $out, '>', 'data.js';

print "creating data.js...\n";

print $out <<"END1";
//AUTOGENERATED FILE - DO NOT EDIT

//(c) 2020-2022 by kittennbfive
//AGPLv3+
//NO WARRANTY!

END1

print $out "//FPGA-pins for each IC:\n";
print $out "const conn_ic=new Map(\n[\n";
foreach my $ic (qw/U29 U32 U3 U7 U9 U10 U12 U15 U17 U20 U21 U22 U23 U24 U28/)
{
	print "searching for $ic: ";
	my %data;
	foreach my $pin (sort keys %connections_fpga)
	{
		foreach (@{$connections_fpga{$pin}})
		{
			my $regex=$ic.'_';
			if(/$regex/)
			{
				$data{$pin}=1;
			}
		}
	}
	print scalar(keys %data)," pins found\n";
	print $out "\t['$ic',['",join("','", sort keys %data),"']],\n";
}
print $out "]);\n\n";
print "\n";

print $out "//FPGA-pins for each header (via buffers):\n";
print $out "const conn_header=new Map(\n[\n";
foreach my $headernumber (1..8)
{
	my $header="J$headernumber";
	print "searching for $header: ";
	my %data;
	foreach my $pin (sort keys %connections_fpga)
	{
		foreach (@{$connections_fpga{$pin}})
		{
			my $regex='('.$header.'_\d+)';
			if(/$regex/)
			{
				$data{$pin}=1;
			}
		}
	}
	print scalar(keys %data)," pins found\n";
	print $out "\t['$header',['",join("','", sort keys %data),"']],\n";
}
print $out "]);\n\n";
print "\n";

print $out "//bank for each FPGA-pin:\n";
print $out "const banks=new Map(\n[\n";
foreach my $bank (qw/0 1 2 3 6 7 8 40/)
{
	print "searching for bank $bank: ";
	my @data;
	foreach my $pin (sort keys %fpga_pins_cabga256)
	{
		my $b=$fpga_pins_cabga256{$pin}->{bank};
		push @data, $pin if($b=~/^\d+$/ && $b==$bank);
	}
	print scalar(@data)," pins found\n";
	print $out "\t['$bank',['",join("','", @data),"']],\n";
}
print $out "]);\n\n";

close $out;

print "done\n\n";
